substitutions:
  node_name: bldc-fan-2
  node_friendly_name: "Fan 2"
  node_platform: ESP8266
  node_board: d1_mini
  i2c_scl: D1
  i2c_sda: D2
  encoder_a: D3
  encoder_b: D7
  encoder_switch: D4
  <<: !include shared/base/secrets.yaml

packages:
  device_base: !include shared/base/device_base.yaml

esphome:
  on_boot:
    priority: 600
    then:
      lambda: |-
        id(fan_2).speed = 30;
        id(my_encoder).set_value(30);

i2c:
  scl: ${i2c_scl}
  sda: ${i2c_sda}

fan:
  - platform: speed
    output: pwm_output
    name: ${node_friendly_name}
    id: fan_2

# Output PWM to fan
output:
  - platform: esp8266_pwm
    pin: D5
    frequency: 18000 Hz
    id: pwm_output

# Font family
font:
  - file: "fonts/Eurosti.ttf"
    id: font1
    size: 32
  - file: "fonts/Eurosti.ttf"
    id: font2
    size: 14
  - file: "fonts/materialdesignicons-webfont.ttf"
    id: icon_font_small
    size: 14
    glyphs:
      - "\U000F091F" # mdi-wifi-strength-1
      - "\U000F0922" # mdi-wifi-strength-2
      - "\U000F0925" # mdi-wifi-strength-3
      - "\U000F0928" # mdi-wifi-strength-4
      - "\U000F00E8" # mdi-cached
      - "\U000F0079" # mdi-battery

  - file: "fonts/materialdesignicons-webfont.ttf"
    id: icon_font_big
    size: 24
    glyphs:
      - "\U000F0210" # mdi-fan

# Oled display
display:
  - platform: ssd1306_i2c
    id: oled1
    model: "SSD1306 128x64"
    brightness: 0.4
    update_interval: 0.5s
    address: 0x3c
    lambda: |-
      it.print(0, 0, id(icon_font_small), "\U000F0928");
      it.print(128, 0, id(icon_font_small), TextAlign::TOP_RIGHT, "\U000F0079");
      it.print(112, 0, id(font2), TextAlign::TOP_RIGHT, "100%");
      if(id(fan_2).state) { id(fan_animation).next_frame(); it.image(0, 25, id(fan_animation));}
      else {it.print(0, 22, id(icon_font_big), "\U000F0210");};      
      it.printf(30, 18, id(font1), "%i", id(fan_2).speed);
      it.print(0, 64, id(font2), TextAlign::BOTTOM_LEFT, "16:35");

animation:
  - file: "shared/icon/fan_animation.gif"
    id: fan_animation

sensor:
  - <<: !include shared/sensor/uptime.yaml
  - <<: !include shared/sensor/wifi_signal.yaml
  - platform: template
    id: oled_brightness
  - platform: rotary_encoder
    name: ${node_friendly_name} Rotary Encoder
    id: my_encoder
    pin_a:
      number: ${encoder_a}
      inverted: true
      mode: INPUT_PULLUP
    pin_b:
      number: ${encoder_b}
      inverted: true
      mode: INPUT_PULLUP
    resolution: 1
    min_value: 0
    max_value: 100
    filters:
      - or:
          - debounce: 0.1s
          - delta: 10
      - lambda: |-
          if (x < 0.0) return 0.0;
          if (x > 100.0) return 100.0;
          return x;
    # on_value:
    #   then:
    #     lambda: |-
    #       if(id(fan_2).state) {
    #         id(fan_2).speed = x;
    #         id(pwm_output).set_level(x/100);
    #       }

binary_sensor:
  - <<: !include shared/binary_sensor/connection_status.yaml
  - platform: gpio
    pin:
      number: ${encoder_switch}
      mode: INPUT_PULLUP
      inverted: true
    name: ${node_friendly_name} Rotary Switch
    internal: true
    on_press:
      then:
        - lambda: |-
            id(my_encoder).set_value(id(fan_2).speed);
        - fan.toggle: fan_2
    on_click:
      - min_length: 1000ms
        max_length: 20000ms
        then:
          - switch.toggle: brightness

switch:
  - <<: !include shared/switch/restart_switch.yaml
  - platform: gpio
    name: ${node_friendly_name} Relay
    pin: D8
    id: relay
  - platform: template
    id: brightness
    optimistic: true

text_sensor:
  - <<: !include shared/text_sensor/uptime_human.yaml
